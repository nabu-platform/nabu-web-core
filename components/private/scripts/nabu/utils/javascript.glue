target ?= null
bundlePath ?= "repository:" + environment("webApplicationId") + ":/private/provided/bundle.json"
[] directories ?= fragmentResources("public/artifacts")
autoBundle ?= true
#"repository:" + environment("webApplicationId") + ":/public/artifacts"

#if (environment("mobile") != true)
response.header("Content-Type", "application/javascript")

bundles = series(bundlePath)

if (autoBundle)
	bundles = merge(bundles, fragmentResources("public/bundled/auto-bundle.json"))

for (bundle : bundles)
	# resolve the javascript files
	nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.js")

# depending on the environment, check for the existence of a file and load it
switch (environment("mobile"))
	case(true)
		environmentSpecific = "mobile.js"
	default
		environmentSpecific = "web.js"

# the files that exist in almost every project we create
files = series("application.js", "routes.js", "swagger.js", "widgets.js")

directoryOrder = lambda(name, when(name ~ "^mixins/.*", -1, 0))

# first find the core files
for (directory : directories)
	# load the fixed files that we almost always have
	for (file : files)
		if (exists(directory + "/" + file))
			string fileContent = template(read(directory + "/" + file))
			echo("\n", fileContent)

# we want to exclude the environmentSpecific from the traditionally loaded as well
files = merge(files, environmentSpecific)

# add the environment specific that we are not loading to the blacklist
files = merge(files, when(environment("mobile") == true, "web.js", "mobile.js"))

# then find the other files
for (directory : directories)
	list = file.list(directory, fileRegex: ".*\.js", recursive: true)
	
	list = sort(lambda(a, b, directoryOrder(a) - directoryOrder(b)), list)
	
	# add all the other files in the directory
	for (file : list)
		if (file !? files)
			string fileContent = template(read(directory + "/" + file))
			echo("\n", fileContent)

# finally, find the environmentspecific file
# we want the on load function there to be triggered after all the other on loads that might exist
for (directory : directories)
	# load the fixed files that we almost always have
	if (exists(directory + "/" + environmentSpecific))
		string fileContent = template(read(directory + "/" + environmentSpecific))
		echo("\n", fileContent)