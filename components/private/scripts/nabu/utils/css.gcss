target ?= null
bundlePath ?= "repository:" + environment("webApplicationId") + ":/private/provided/bundle.json"
string [] directories ?= fragmentResources("public/artifacts")
allowGcss ?= true
allowSass ?= false
compileSass ?= true
autoBundle ?= true
debug ?= false

#if (!environment("mobile"))
response.header("Content-Type", "text/css")

bundles = series(bundlePath)

if (autoBundle)
	bundles = merge(bundles, fragmentResources("public/bundled/auto-bundle.json"))

sass = ""
for (bundle : bundles)
	if (allowGcss)
		// load any variable files we might have
		inject(nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.glue", debug:debug)/result)
		
		// load any css and gcss files
		inject(nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.(css|gcss)", debug:debug)/result)
	else
		// still load css
		inject(nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.(css)", debug:debug)/result)
		
	if (allowSass)
		// load sass files
		sass = sass + "\n" + nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.(sass|scss)", debug:debug)/concatenated

for (directory : directories)
	// load all the artifacts
	for (file : file.list(directory, fileRegex: ".*\.(css|gcss|sass|scss)", recursive: true))
		if (file ~ ".*\.(sass|scss)")
			if (allowSass)
				sass = sass + "\n" + template(read(directory + "/" + file))
		else if (file ~ ".*\.css")
			echo("\n", template(read(directory + "/" + file)))
		else
			if (allowGcss)
				eval(template(read(directory + "/" + file)), scope())

if (size(trim(sass)) > 0 && compileSass)
	//console("sass is", sass)
	echo(sass.compile(sass))