target ?= null
staticTarget ?= null
bundlePath ?= "repository:" + environment("webApplicationId") + ":/private/provided/bundle.json"
[] directories ?= fragmentResources("public/artifacts")
autoBundle ?= true
defaultTemplate ?= true

# get variables if necessary
inject(scope(1))

replacer = nabu.utils.lambdas()/templater

bundles = series(bundlePath)

if (autoBundle)
	bundles = merge(bundles, fragmentResources("public/bundled/auto-bundle.json"))
	bundles = merge(bundles, fragmentResources("public/bundled/pre-bundle.json"))
	bundles = merge(bundles, fragmentResources("public/bundled/post-bundle.json"))

for (bundle : bundles)
	# resolve included tpls
	nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.tpl", defaultTemplate: defaultTemplate)
	
	# resolve included "nabu template jsons"
	nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.npt", print: false, defaultTemplate: defaultTemplate)
	
	# resolve static resources
	# used to have param: includes: "vendor"
	# not sure why...
	nabu.utils.resolveStatic(target: staticTarget, bundlePath: bundle)

for (directory : directories)
	# resolve the tpls you have in your project
	for (file : file.list(directory, fileRegex: ".*\.tpl", recursive: true))
		echo("\n", replacer(template(read(directory + "/" + file))))
