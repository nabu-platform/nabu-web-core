target ?= null
bundlePath ?= "repository:" + environment("webApplicationId") + ":/private/provided/bundle.json"
string [] directories ?= fragmentResources("public/artifacts")
autoBundle ?= true
debug ?= false
# we can skip the compile if we are interested in the aris definitions
compile ?= true

mode = "light-extension"
#mode = "full-extension"

response.header("Content-Type", "text/css")

bundles = series(bundlePath)

if (autoBundle)
	bundles = merge(fragmentResources("public/bundled/pre-bundle.json"), bundles)
	bundles = merge(bundles, fragmentResources("public/bundled/auto-bundle.json"))
	bundles = merge(bundles, fragmentResources("public/bundled/post-bundle.json"))

scss = ""

captureEcho()
arisBreakpoints()
breakpoints = releaseEcho()
if (breakpoints != null && breakpoints != "")
	scss = scss + breakpoints

# preload variables that have been set in the application
if (file.readable("repository:" + environment("webApplicationId") + ":/public/aris/variables.scss"))
	string content = file.read("repository:" + environment("webApplicationId") + ":/public/aris/variables.scss")
	scss = scss + "\n" + content

captureEcho()
for (bundle : bundles)
	# still load css
	if (compile)
		inject(nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.(css)", debug:debug, defaultTemplate: false)/result)
		
	# load scss files
	scss = scss + "\n" + nabu.utils.resolve(target: target, bundlePath: bundle, regex: ".*\.scss", debug:debug, defaultTemplate: false)/concatenated

for (directory : directories)
	# load all the artifacts
	for (file : file.list(directory, fileRegex: ".*\.(css|scss)", recursive: true))
		if (file ~ ".*\.scss")
			scss = scss + "\n" + template(read(directory + "/" + file))
		else if (file ~ ".*\.css" && compile)
			echo("\n", template(read(directory + "/" + file)))
nativeCss = releaseEcho()



# generate full extensions
if (mode == "full-extension")
	captureEcho()
	result = nabu.utils.arisGenerate(scss, function("nabu.utils.arisComponent"))
	scss = scss + "\n" + releaseEcho()
	
	if (compile)
		css = sass.compile(scss)
		css = arisPostProcess(
			css: css,
			components: result/components,
			patterns: result/patterns,
			extensions: result/extensions,
			mixins: result/mixins)/css

else if (mode == "light-extension")
	# postload variants that have been set in the application
	if (file.readable("repository:" + environment("webApplicationId") + ":/public/aris/variants.scss"))
		string content = file.read("repository:" + environment("webApplicationId") + ":/public/aris/variants.scss")
		scss = scss + "\n" + content

	captureEcho()
	result = nabu.utils.arisGenerate2(scss, function("nabu.utils.arisComponent2"))
	scss = scss + "\n" + releaseEcho()
	
	if (compile)
		css = sass.compile(scss)
		css = arisPostProcess3(
			css: css,
			components: result/components,
			mixins: result/mixins)/css

# light with unique naming
else if (mode == "light-unique")
	css = sass.compile(scss)
	css = replace(":is-", ".is-", css)
# unique naming with backwards compatibility for IE
else if (mode == "compatible-unique")
	css = sass.compile(scss)
	css = replace(":is-", ".is-", css)

if (compile)
	echo(css)
	# things like @import statements have to be at the top of the css to work
	# because you will usually define those in your theme (which is in scss), we don't want the native css (e.g. font awesome etc) to be at the very top
	echo(nativeCss)