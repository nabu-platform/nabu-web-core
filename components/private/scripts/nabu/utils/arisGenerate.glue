fullContent ?= null
lambda generator ?= null

extensions = series()
for (extension : find("//.*@extension[\s]+(.*)", fullContent))
	parts = split("[\s]+", extension)
	extensions = merge(extensions, structure(name: parts[0], component: parts[1]))

components = find("//.*@component[\s]+(.*)", fullContent)
patterns = find("//.*@pattern[\s]+(.*)", fullContent)


# this is rather nasty, it assumes the mixin has proper whitespacing because the ending } is assumped to be right after a new line
# it is in lieu of more expensive processing which is currently out of scope
mixins = find("(?s)@mixin.*?\{.*?\n\}", fullContent)

mixins = derive(lambda(mixin, structure(
		name: replace("(?s)@mixin[\s]*([^{\s]+).*", "$1", mixin),
		body: trim(replace("(?s)^[^{]+\{(.*)\}[^}]*$", "$1", mixin))
	)), mixins)


findExtensions = lambda
	name ?= null
	# start with the actual extensions
	@return
	names = extensions[component == /name]/name
	# currently max 5 deep?
	for (5)
		childExtensions = extensions[component ? /names && name !? /names]/name
		if (size(childExtensions) == 0)
			break
		else
			names = merge(names, childExtensions)

for (component : components)
	generator(
		component: component,
		content: fullContent,
		mixins: mixins,
		extensions: findExtensions(component))
		#extensions: extensions[component == /component]/name)

for (pattern : patterns)
	generator(
		component: pattern,
		content: fullContent,
		mixins: mixins,
		extensions: findExtensions(pattern))
		#extensions: extensions[component == /pattern]/name)

for (extension : extensions)
	generator(
		component: extension/name,
		content: fullContent,
		mixins: mixins,
		extensions: findExtensions(extension/name))
		#extensions: extensions[component == /extension/name]/name)
