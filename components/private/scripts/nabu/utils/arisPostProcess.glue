# To refactor hidden dimensions & extensions

# the scss should already be compiled at this point
css ?= null
# don't want to recalculate these, just pass them along from the original generate
components ?= null
patterns ?= null
extensions ?= null
mixins ?= null

# copy paste from arisGenerate
findExtensions = lambda
	name ?= null
	# start with the actual extensions
	@return
	names = extensions[component == /name]/name
	# currently max 5 deep?
	for (5)
		childExtensions = extensions[component ? /names && name !? /names]/name
		if (size(childExtensions) == 0)
			break
		else
			names = merge(names, childExtensions)
# find all hidden dimensions etc
# we include the trailing { to make sure we have a full unique match, not a partial match
# for instance if a particular rule is simply "more specific", it would match the beginning, but not the end
hidden = unique(find("(?s)(?:^|})[\s]*([^{]*:is-[^{]+\{)", css))
for (single : hidden)
	replacement = single

	# we replace one item at a time, but there may be multiple items to replace, e.g. this will require two loops:
	# .is-form .is-this:is-form-component :is-form-label
	# we don't want to re-find from the css every time as this is too intensive (regex on massive strings...)
	# so instead we iterate on each line until it is fully resolved
	while (replacement ~ ".*:is-.*")
		# we keep track of the original, if you for instance reference a component that is unknown, it will never be resolved
		# we don't want to loop indefinitely
		original = replacement
		# we remove the trailing { which we added to guarantee an exact match in final replacement
		# however we might need to duplicate this line multiple times and we only want one trailing { in the result
		replacements = series(replace("[\s]*\{", "", replacement))
		
		# can have multiple combined, like :is-button:has-border-pill
		# we need to explode it then...
		names = unique(find(":is-([\w-]+)", replacement))
		for (name : names)
			# if it is a component of any type, we must take that and all its extension
			if (name ? components || name ? patterns || name ? extensions/name)
				extensions = findExtensions(name)
				result = series()
				for (component : merge(name, extensions))
					result = merge(result, replace(":is-" + name, ".is-" + component, replacements))
				replacements = result
				
		replacement = join(", ", replacements) + " {"
		if (original == replacement)
			break
		
	# we want to replace dimensions
	# for example we might have :is-form-component:is-border-underline
	# a dimensions is only useful if it is combined with the component, which means the component is always available in the selector
	# if we have a standalone ":is-border-underline", it won't do much anyway in css
	# our assumption is that the component is always the first "is" selector, that is how it is generated by the aris framework and even when writing manual css it is the most likely approach
	while (replacement ~ ".*:is-.*")
		original = replacement
		# again we strip the trailing {
		tmp = replace("[\s]*\{", "", replacement)
		dimensionReferences = unique(find("(?m)(?:^|,|[\s]+)(.is-[^,\s]+:is-[^,\s]+)", tmp))
		console("dimension references are", dimensionReferences)
		for (dimensionReference : dimensionReferences)
			component = replace("^.is-([\w-]+).*", "$1", dimensionReference)
			dimension = replace(".*:is-([\w-]+).*", "$1", dimensionReference)
			# we want to check for variants of that component that embed the dimension
			applicableVariants = mixins[name ~ /component + "-variant-.*" && body ~ "(?s).*@include[\s]+[\w-]+-" + /dimension + "[\s]*;"]/name
			
			result = series()
			# we want to add a copy for the original dimension and any variant that embeds it
			for (singleVariant : merge(dimension, applicableVariants))
				singleToReplace = replace(":is-" + dimension, ".is-" + singleVariant, dimensionReference)
				
			console("variants are", applicableVariants)
			
		# of course we also just want to target the dimension
		if (original == replacement)
			console("Could not fully resolve references, might be missing some css: " + original)
			break
		
	
	
	
	# for dimensions we use the "has" syntax, so "has-border-pill"
	# so the problem for dimensions is that variants encapsulate them
	# .is-button:has-color-primary will match .is-button.is-color-primary but should also be applied to .is-button.is-variant-primary
		
	css = replace(
		quoteRegex(single), 
		quoteReplacement(replacement),
		css)